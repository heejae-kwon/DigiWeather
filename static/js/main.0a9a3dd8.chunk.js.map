{"version":3,"sources":["components/SearchForm.tsx","components/WeatherForm.tsx","App.tsx","index.tsx"],"names":["SearchMethod","SearchForm","props","useState","input","setInput","ZIPCODE","method","setMethod","className","onKeyDown","e","key","preventDefault","getWeather","onInput","currentTarget","value","type","placeholder","aria-label","onChange","toString","Geographic","id","defaultValue","WeatherForm","imgSrc","icon","time","Date","parseInt","dt","name","alt","src","main","temp","toLocaleString","temp_max","temp_min","humidity","wind_speed","App","Object","weather","setWeather","forecast","setForecast","isWeatherActive","setIsWeatherActive","content","searchMethod","a","response","axios","get","data","console","error","keys","length","description","wind","speed","showWeather","res","list","map","fc","index","showForecast","ReactDOM","render","document","getElementById"],"mappings":"iLAMYA,E,mGAAAA,O,qBAAAA,I,4BAAAA,M,KAGL,IAAMC,EAAa,SAACC,GAA4B,IAAD,EAC1BC,mBAAS,IADiB,mBAC7CC,EAD6C,KACtCC,EADsC,OAExBF,mBAASH,EAAaM,SAFE,mBAE7CC,EAF6C,KAErCC,EAFqC,KA4BpD,OACE,yBAAKC,UAAU,iBACb,0BAAMA,UAAU,mBACd,yBAAKA,UAAU,8DACb,2BAAOA,UAAU,kHACfC,UA9BW,SAACC,GACN,KAAVP,GAGU,UAAVO,EAAEC,MACJD,EAAEE,iBACFX,EAAMY,WAAWV,EAAOG,KAwBOQ,QAAS,SAACJ,GAAD,OAA0CN,EAASM,EAAEK,cAAcC,QAAQC,KAAK,OAAOC,YAAY,UAAUC,aAAW,cAC5J,4BAAQX,UAAU,6KAChBY,SAvBiB,SAACV,GAE1B,OADeA,EAAEK,cAAcC,MAAMK,YAEnC,IAAK,UACHd,EAAUR,EAAaM,SACvB,MAEF,IAAK,aACHE,EAAUR,EAAauB,cAeWC,GAAG,aAAaC,aAAclB,EAAOe,YACnE,4BAAQL,MAAOjB,EAAaM,QAAQgB,YAApC,YACA,4BAAQL,MAAOjB,EAAauB,WAAWD,YAAvC,+BCeGI,EA/CK,SAACxB,GAEnB,IAAMyB,EAAiB,oCAAsCzB,EAAM0B,KAAO,UACpEC,EAAO,IAAIC,KAAwB,IAAnBC,SAAS7B,EAAM8B,KAErC,OAAQ,yBAAKvB,UAAU,iDACrB,yBAAKA,UAAU,wCACb,yBAAKA,UAAU,yCACZP,EAAM+B,MAET,6BACE,yBAAKC,IAAI,cAAcC,IAAKR,KAE9B,6BACE,yBAAKlB,UAAU,wDACb,yBAAKA,UAAU,QACZP,EAAMkC,MAET,yBAAK3B,UAAU,QACZP,EAAMmC,OAGX,uBAAG5B,UAAU,2BACVoB,EAAKS,kBAER,yBAAK7B,UAAU,mBACb,uBAAGA,UAAU,2BACV,MAAQP,EAAMqC,UAEjB,uBAAG9B,UAAU,2BACV,MAAQP,EAAMsC,WAGnB,uBAAG/B,UAAU,2BACV,aAAeP,EAAMuC,SAAW,KAEnC,uBAAGhC,UAAU,2BACV,SAAWP,EAAMwC,gBCsDbC,EAnGH,WAEV,IAFgB,EAIcxC,mBAASyC,QAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKgB3C,mBAASyC,QALzB,mBAKTG,EALS,KAKCC,EALD,OAM8B7C,oBAAS,GANvC,mBAMT8C,EANS,KAMQC,EANR,KAOVpC,EAAU,uCAAG,WAAOqC,EAAiBC,GAAxB,eAAAC,EAAA,uDACO,IAApBJ,GACFC,GAAmB,GAFJ,SAKXI,EAAgB,KALL,KAMPF,EANO,cAORpD,EAAaM,QAPL,SAYRN,EAAauB,WAZL,mCAQMgC,IAAMC,IAZd,8DAY6BL,GAR3B,cAQXG,EARW,wEAkBfR,EAAWQ,EAASG,KAAKZ,SACzBG,EAAYM,EAASG,KAAKV,UAnBX,kDAqBfW,QAAQC,MAAR,MArBe,0DAAH,wDAiFhB,OACE,yBAAKlD,UAAU,iCACb,yBAAKA,UAAU,mCACb,kBAAC,EAAD,CAAYK,WAAYA,IA3DV,WAClB,IAAwB,IAApBmC,GAA8BJ,GAGE,IAAhCD,OAAOgB,KAAKf,GAASgB,OAIzB,OAAO,kBAAC,EAAD,CAAazB,KAAMS,EAAQA,QAAQ,GAAGT,KAC3C0B,YAAajB,EAAQA,QAAQ,GAAGiB,YAChCzB,KAAMQ,EAAQT,KAAKC,KACnBE,SAAUM,EAAQT,KAAKG,SACvBC,SAAUK,EAAQT,KAAKI,SACvBC,SAAUI,EAAQT,KAAKK,SACvBC,WAAYG,EAAQkB,KAAKC,MACzBhC,GAAIa,EAAQb,GACZC,KAAMY,EAAQZ,KACdL,KAAMiB,EAAQA,QAAQ,GAAGjB,OA2CtBqC,GAxCc,WACnB,IAAwB,IAApBhB,GAA8BF,GAGG,IAAjCH,OAAOgB,KAAKb,GAAUc,OAA1B,CAIA,IACMK,EAD6BnB,EAASoB,KACjBC,KAAI,SAACC,EAAIC,GAClC,OAAQ,yBAAK7D,UAAU,QACrB,kBAAC,EAAD,CAAaG,IAAK0D,EAAOlC,KAAMiC,EAAGxB,QAAQ,GAAGT,KAC3C0B,YAAaO,EAAGxB,QAAQ,GAAGiB,YAC3BzB,KAAMgC,EAAGjC,KAAKC,KACdE,SAAU8B,EAAGjC,KAAKG,SAClBC,SAAU6B,EAAGjC,KAAKI,SAClBC,SAAU4B,EAAGjC,KAAKK,SAClBC,WAAY2B,EAAGN,KAAKC,MACpBhC,GAAIqC,EAAGrC,GACPC,KAAM,GACNL,KAAMyC,EAAGxB,QAAQ,GAAGjB,WAI1B,OAAQ,yBAAKnB,UAAU,sCACrB,6BACE,+CAIF,yBAAKA,UAAU,iBACZyD,KAUAK,MC9FTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0a9a3dd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\ninterface SearchFormProps {\r\n  getWeather: (input: string, method: SearchMethod) => Promise<void>;\r\n}\r\nexport enum SearchMethod {\r\n  ZIPCODE, Geographic\r\n}\r\nexport const SearchForm = (props: SearchFormProps) => {\r\n  const [input, setInput] = useState('');\r\n  const [method, setMethod] = useState(SearchMethod.ZIPCODE);\r\n  const enterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (input === '') {\r\n      return;\r\n    }\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      props.getWeather(input, method);\r\n    }\r\n  }\r\n  const searchMethodChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    const target = e.currentTarget.value.toString();\r\n    switch (target) {\r\n      case 'ZIPCODE': {\r\n        setMethod(SearchMethod.ZIPCODE);\r\n        break;\r\n      }\r\n      case 'Geographic': {\r\n        setMethod(SearchMethod.Geographic);\r\n        break;\r\n      }\r\n      default: {\r\n\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"bg-white my-2\">\r\n      <form className=\"w-full max-w-sm\">\r\n        <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\r\n          <input className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\r\n            onKeyDown={enterKeyDown} onInput={(e: React.FormEvent<HTMLInputElement>) => setInput(e.currentTarget.value)} type=\"text\" placeholder=\"Enter..\" aria-label=\"Full name\" />\r\n          <select className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\r\n            onChange={searchMethodChange} id=\"grid-state\" defaultValue={method.toString()}>\r\n            <option value={SearchMethod.ZIPCODE.toString()}>ZIP code</option>\r\n            <option value={SearchMethod.Geographic.toString()}>Geographic Coordinates</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n    </div>);\r\n}\r\n","import React from 'react';\r\n\r\ninterface WeatherFormProps {\r\n  main: string,\r\n  description: string,\r\n  temp: string,\r\n  temp_max: string,\r\n  temp_min: string,\r\n  humidity: string,\r\n  wind_speed: string,\r\n  dt: string,\r\n  name: string,\r\n  icon: string\r\n}\r\nconst WeatherForm = (props: WeatherFormProps) => {\r\n\r\n  const imgSrc: string = \"http://openweathermap.org/img/wn/\" + props.icon + \"@2x.png\";\r\n  const time = new Date(parseInt(props.dt)*1000);\r\n\r\n  return (<div className=\"flex my-2 bg-white max-w-sm rounded shadow-lg\">\r\n    <div className=\"flex flex-col items-center px-6 py-4\">\r\n      <div className=\"flex flex-row font-bold text-2xl mb-2\">\r\n        {props.name}\r\n      </div>\r\n      <div>\r\n        <img alt=\"weather img\" src={imgSrc} />\r\n      </div>\r\n      <div>\r\n        <div className=\"flex flex-row justify-between font-bold text-lg mb-2\">\r\n          <div className=\"mr-2\">\r\n            {props.main}\r\n          </div>\r\n          <div className=\"ml-2\">\r\n            {props.temp}\r\n          </div>\r\n        </div>\r\n        <p className=\"text-gray-700 text-base\">\r\n          {time.toLocaleString()}\r\n        </p>\r\n        <div className=\"justify-between\">\r\n          <p className=\"text-gray-700 text-base\">\r\n            {\"H: \" + props.temp_max}\r\n          </p>\r\n          <p className=\"text-gray-700 text-base\">\r\n            {\"L: \" + props.temp_min}\r\n          </p>\r\n        </div>\r\n        <p className=\"text-gray-700 text-base\">\r\n          {\"Humadity: \" + props.humidity + \"%\"}\r\n        </p>\r\n        <p className=\"text-gray-700 text-base\">\r\n          {\"Wind: \" + props.wind_speed}\r\n        </p>\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n\r\n  </div>);\r\n}\r\nexport default WeatherForm;","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { SearchForm, SearchMethod } from './components/SearchForm';\r\nimport WeatherForm from './components/WeatherForm';\r\n\r\nconst App = () => {\r\n\r\n  const devUrl = \"http://localhost:5000/api/weather/zipcode/\";\r\n  const buildUrl = \"http://ts-weather-server.herokuapp.com/api/weather/zipcode/\";\r\n  const [weather, setWeather] = useState(Object);\r\n  const [forecast, setForecast] = useState(Object);\r\n  const [isWeatherActive, setIsWeatherActive] = useState(false);\r\n  const getWeather = async (content: string, searchMethod: SearchMethod) => {\r\n    if (isWeatherActive === false) {\r\n      setIsWeatherActive(true);\r\n    }\r\n    try {\r\n      let response: any = null;\r\n      switch (searchMethod) {\r\n        case SearchMethod.ZIPCODE: {\r\n          response = await axios.get(buildUrl + content);\r\n\r\n          break;\r\n        }\r\n        case SearchMethod.Geographic: {\r\n          // const reg:RegExp = content.\r\n          // response = await axios.get('http://localhost:5000/api/weather/geographic_coordinates/' + content);\r\n          break;\r\n        }\r\n      }\r\n      setWeather(response.data.weather);\r\n      setForecast(response.data.forecast);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n  };\r\n  const showWeather = () => {\r\n    if (isWeatherActive === false || !weather) {\r\n      return;\r\n    }\r\n    if (Object.keys(weather).length === 0) {\r\n      return;\r\n    }\r\n\r\n    return <WeatherForm main={weather.weather[0].main}\r\n      description={weather.weather[0].description}\r\n      temp={weather.main.temp}\r\n      temp_max={weather.main.temp_max}\r\n      temp_min={weather.main.temp_min}\r\n      humidity={weather.main.humidity}\r\n      wind_speed={weather.wind.speed}\r\n      dt={weather.dt}\r\n      name={weather.name}\r\n      icon={weather.weather[0].icon}\r\n    />\r\n  };\r\n  const showForecast = () => {\r\n    if (isWeatherActive === false || !forecast) {\r\n      return;\r\n    }\r\n    if (Object.keys(forecast).length === 0) {\r\n      return;\r\n    }\r\n\r\n    const listOfForecast: Array<any> = forecast.list;\r\n    const res = listOfForecast.map((fc, index) => {\r\n      return (<div className=\"mx-2\">\r\n        <WeatherForm key={index} main={fc.weather[0].main}\r\n          description={fc.weather[0].description}\r\n          temp={fc.main.temp}\r\n          temp_max={fc.main.temp_max}\r\n          temp_min={fc.main.temp_min}\r\n          humidity={fc.main.humidity}\r\n          wind_speed={fc.wind.speed}\r\n          dt={fc.dt}\r\n          name={\"\"}\r\n          icon={fc.weather[0].icon}\r\n        />\r\n      </div>);\r\n    });\r\n    return (<div className=\"flex flex-col bg-blue-400 w-screen\">\r\n      <div>\r\n        <p>\r\n          3hours forecast\r\n        </p>\r\n      </div>\r\n      <div className=\"flex flex-row\">\r\n        {res}\r\n      </div>\r\n    </div>);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-blue-400 h-screen w-screen\">\r\n      <div className=\"flex flex-col items-center py-4\">\r\n        <SearchForm getWeather={getWeather} />\r\n        {showWeather()}\r\n        {showForecast()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/tailwind.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}