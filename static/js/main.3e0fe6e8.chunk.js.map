{"version":3,"sources":["components/SearchForm.tsx","components/WeatherForm.tsx","App.tsx","index.tsx"],"names":["SearchMethod","SearchForm","props","useState","input","setInput","ZIPCODE","method","setMethod","className","onKeyDown","e","key","preventDefault","getWeather","onInput","currentTarget","value","type","placeholder","aria-label","onChange","toString","Geographic","id","defaultValue","WeatherForm","content","App","weather","setWeather","isWeatherActive","setIsWeatherActive","searchMethod","a","response","axios","get","data","console","log","error","JSON","stringify","showWeather","ReactDOM","render","document","getElementById"],"mappings":"iLAMYA,E,mGAAAA,O,qBAAAA,I,4BAAAA,M,KAGL,IAAMC,EAAa,SAACC,GAA4B,IAAD,EAC1BC,mBAAS,IADiB,mBAC7CC,EAD6C,KACtCC,EADsC,OAExBF,mBAASH,EAAaM,SAFE,mBAE7CC,EAF6C,KAErCC,EAFqC,KA4BpD,OACE,yBAAKC,UAAU,iBACb,0BAAMA,UAAU,mBACd,yBAAKA,UAAU,8DACb,2BAAOA,UAAU,kHACfC,UA9BW,SAACC,GACN,KAAVP,GAGU,UAAVO,EAAEC,MACJD,EAAEE,iBACFX,EAAMY,WAAWV,EAAOG,KAwBOQ,QAAS,SAACJ,GAAD,OAA0CN,EAASM,EAAEK,cAAcC,QAAQC,KAAK,OAAOC,YAAY,UAAUC,aAAW,cAC5J,4BAAQX,UAAU,6KAChBY,SAvBiB,SAACV,GAE1B,OADeA,EAAEK,cAAcC,MAAMK,YAEnC,IAAK,UACHd,EAAUR,EAAaM,SACvB,MAEF,IAAK,aACHE,EAAUR,EAAauB,cAeWC,GAAG,aAAaC,aAAclB,EAAOe,YACnE,4BAAQL,MAAOjB,EAAaM,QAAQgB,YAApC,YACA,4BAAQL,MAAOjB,EAAauB,WAAWD,YAAvC,+BC9BGI,EAXK,SAACxB,GAEnB,OAAQ,yBAAKO,UAAU,iEACrB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,0BAAf,eACA,uBAAGA,UAAU,2BACVP,EAAMyB,YC6CAC,EAlDH,WAAO,IAAD,EAEczB,mBAAS,IAFvB,mBAET0B,EAFS,KAEAC,EAFA,OAG8B3B,oBAAS,GAHvC,mBAGT4B,EAHS,KAGQC,EAHR,KAIVlB,EAAU,uCAAG,WAAOa,EAAiBM,GAAxB,eAAAC,EAAA,uDACO,IAApBH,GACFC,GAAmB,GAFJ,SAKXG,EAAgB,KALL,KAMPF,EANO,cAORjC,EAAaM,QAPL,SAWRN,EAAauB,WAXL,mCAQMa,IAAMC,IAAI,+DAAiEV,GARjF,cAQXQ,EARW,wEAiBfL,EAAWK,EAASG,MACpBC,QAAQC,IAAIL,EAASG,MAlBN,kDAoBfC,QAAQE,MAAR,MApBe,0DAAH,wDAoChB,OACE,yBAAKhC,UAAU,iCACb,yBAAKA,UAAU,mCACb,kBAAC,EAAD,CAAYK,WAAYA,IAfV,WAClB,IAAwB,IAApBiB,EAAJ,CAGA,IAAIJ,EAAkB,GAKtB,OAJgB,OAAZE,IACFF,EAAUe,KAAKC,UAAUd,IAGpB,kBAAC,EAAD,CAAaF,QAASA,KAOxBiB,MC7CTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3e0fe6e8.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\ninterface SearchFormProps {\n  getWeather: (input: string, method: SearchMethod) => Promise<void>;\n}\nexport enum SearchMethod {\n  ZIPCODE, Geographic\n}\nexport const SearchForm = (props: SearchFormProps) => {\n  const [input, setInput] = useState('');\n  const [method, setMethod] = useState(SearchMethod.ZIPCODE);\n  const enterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (input === '') {\n      return;\n    }\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      props.getWeather(input, method);\n    }\n  }\n  const searchMethodChange = (e: React.FormEvent<HTMLSelectElement>) => {\n    const target = e.currentTarget.value.toString();\n    switch (target) {\n      case 'ZIPCODE': {\n        setMethod(SearchMethod.ZIPCODE);\n        break;\n      }\n      case 'Geographic': {\n        setMethod(SearchMethod.Geographic);\n        break;\n      }\n      default: {\n\n      }\n    }\n  }\n  return (\n    <div className=\"bg-white my-2\">\n      <form className=\"w-full max-w-sm\">\n        <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\n          <input className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n            onKeyDown={enterKeyDown} onInput={(e: React.FormEvent<HTMLInputElement>) => setInput(e.currentTarget.value)} type=\"text\" placeholder=\"Enter..\" aria-label=\"Full name\" />\n          <select className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n            onChange={searchMethodChange} id=\"grid-state\" defaultValue={method.toString()}>\n            <option value={SearchMethod.ZIPCODE.toString()}>ZIP code</option>\n            <option value={SearchMethod.Geographic.toString()}>Geographic Coordinates</option>\n          </select>\n        </div>\n      </form>\n    </div>);\n}\n","import React from 'react';\n\ninterface WeatherFormProps {\n  content: string;\n}\nconst WeatherForm = (props: WeatherFormProps) => {\n\n  return (<div className=\"flex my-2 bg-white max-w-sm rounded overflow-scroll shadow-lg\">\n    <div className=\"px-6 py-4\">\n      <div className=\"font-bold text-xl mb-2\">The Weather</div>\n      <p className=\"text-gray-700 text-base\">\n        {props.content}\n      </p>\n    </div>\n  </div>);\n}\nexport default WeatherForm;","import React, { useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport { SearchForm, SearchMethod } from './components/SearchForm';\nimport WeatherForm from './components/WeatherForm';\nimport Axios from 'axios';\n\nconst App = () => {\n\n  const [weather, setWeather] = useState({});\n  const [isWeatherActive, setIsWeatherActive] = useState(false);\n  const getWeather = async (content: string, searchMethod: SearchMethod) => {\n    if (isWeatherActive === false) {\n      setIsWeatherActive(true);\n    }\n    try {\n      let response: any = null;\n      switch (searchMethod) {\n        case SearchMethod.ZIPCODE: {\n          response = await axios.get('https://ts-weather-server.herokuapp.com/api/weather/zipcode/' + content);\n          break;\n        }\n        case SearchMethod.Geographic: {\n          // const reg:RegExp = content.\n          // response = await axios.get('http://localhost:5000/api/weather/geographic_coordinates/' + content);\n          break;\n        }\n      }\n      setWeather(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n\n  };\n  const showWeather = () => {\n    if (isWeatherActive === false) {\n      return;\n    }\n    let content: string = '';\n    if (weather !== null) {\n      content = JSON.stringify(weather);\n    }\n\n    return <WeatherForm content={content} />;\n\n  };\n  return (\n    <div className=\"bg-blue-400 h-screen w-screen\">\n      <div className=\"flex flex-col items-center py-4\">\n        <SearchForm getWeather={getWeather} />\n        {showWeather()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}